
============================
 Install Kubernetes Cluster
============================

1) Create Servers for installing k8s
-------------------------------------

I will create 3 servers on Oracle Cloud.
They will all  use default values for compute.
(OL7.9 and 2 AMD cores)

1.1) List of servers:
 Server 1
 - 130.61.113.223
 - 10.0.0.9

 Server 2
 - 130.61.83.76
 - 10.0.0.30

 Server 3
 - 130.61.226.35
 - 10.0.0.223


2) Configure Servers for k8s
-----------------------------

- Create file for kubernetes repo, see Not.1 below,
- sudo yum update
- Disable swap:
  - sudo swapoff -a
  - sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
- Set SELinux in permissive mode (effectively disabling it)
  - sudo setenforce 0
  - sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
- Remove firewalld
  - sudo systemctl disable firewalld
  - sudo systemctl stop firewalld
  - systemctl status firewalld
- Install Docker + k8s: sudo yum install kubeadm docker -y
- Start and enable docker service:
  - sudo systemctl enable docker 
  - sudo systemctl start docker

* Not.1
sudo vi /etc/yum.repos.d/kubernetes.repo
+ copy/paste in text between dotted lines:
.......................................................................
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
       https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
/etc/yum.repos.d/kubernetes.repo
.......................................................................


3) Create the k8s cluster
--------------------------

Decide which server should be the Master node, this node will run "interal" k8s 
functionality and wil not by default run any user pods.

I will use Server-1 as Master and configure the other two servers as Worker nodes (Mineons).

3.1) Bootstrap the cluster on Server-1 (this will then be your Master)

Tell k8s to use same cgroupDriver as docker when running init, this is 
done by adding a custom configuration file when runing "kubeadm init"

Create kubeadm-config.yaml by copy text between dotted lines:
.......................................
kind: ClusterConfiguration
apiVersion: kubeadm.k8s.io/v1beta3
kubernetesVersion: v1.22.1
---
kind: KubeletConfiguration
apiVersion: kubelet.config.k8s.io/v1beta1
cgroupDriver: cgroupfs
.......................................

Then run:
- sudo kubeadm init --config kubeadm-config.yaml (generates conf /var/lib/kubelet/config.yaml)
  copy some of the output text, you will need this later when joining other serves and to access cluster via kubectl.
- sudo systemctl enable kubelet
- sudo systemctl start kubelet

Output from "sudo kubeadm init" command on master :
----- snip -----
To start using your kubectl, you need to run the following as a regular user:
  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config
----- end -----

After executing commands above, try to use kubectl:
kubectl get nodes
kubectl get pods --all-namespaces

You should now deploy a networking addon to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

I tested the Weave Net (https://www.weave.works/docs/net/latest/kubernetes/kube-addon/)
kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

3.2) After this, add Server-2 and Server-3 to the cluster

Join the cluster:

Use text from "sudo kubeadm init" command on Master :
Join Server 1 and 2 by running:
sudo kubeadm join 10.0.0.32:6443 --token u6n85n.qtwdnu4fmvz3fgfp \
    --discovery-token-ca-cert-hash sha256:d97c79121d2c82ac913ce81ba12ef873dc43dff61e81681f08dad6dd0b373b04 

Start kubelet:
- sudo systemctl enable kubelet
- sudo systemctl start kubelet


4) Testing the k8s cluster and useful commands
-----------------------------------------------

4.1) Useful commands
list nodes in cluster: kubectl get nodes -o wide
List user pods: kubectl get pods -o wide
List all pods: kubectl get pods --all-namespaces -o wide
List all deplyments: kubectl get deployments
Desc all deplyments: kubectl describe deployments

4.2 Run a small linux server for example 
kubectl run alpine3 -it --image=alpine sh
kubectl get pods -o wide (options wide give some xtra info, for example NODE and IP)
Execute a command: kubectl exec alpine3-cf88d76d-mwg4j ls
Login to pod again kubectl exec -it alpine3-cf88d76d-mwg4j -- sh
kubectl describe pod alpine3-cf88d76d-mwg4j

Kill the specific pod: kubectl delete pod alpine3-cf88d76d-mwg4j
Delete/remove a deployment: kubectl delete deployments alpine3
Then look at: kubectl get deployments

4.3 Deploy a webserver (nginx)
kubectl run nginx1 --image=nginx
kubectl describe pod nginx1-675bf6c9f-qmntf
kubectl describe pod nginx1
Fetch IP and try (from correct workder node): curl <ip>
(should say <!DOCTYPE html> .... <h1>Welcome to nginx!</h1> ....)

4.4  Access via Docker
If you login to the specific NODE where the pod is runing you can access it via nornal docker commands like:
sudo docker ps
sudo docker exec -it 3c1994306662 ls
sudo docker exec -it 3c1994306662 hostname

5) K8s useful training

Read:
- https://kubernetes.io/docs/concepts/
- https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
- https://kubernetes.io/docs/tutorials/stateful-application/cassandra/

Videos:
- great introduction to k8s:  https://www.youtube.com/watch?v=X48VuDVv0do
- operators: https://www.youtube.com/watch?v=ha3LjlD6g7g

StatefullSet and much more look at github repo and videos by "Just me and Opensource"
- https://www.youtube.com/channel/UC6VkhPuCCwR_kG0GExjoozg
- https://www.youtube.com/watch?v=r_ZEpPTCcPE
- https://github.com/justmeandopensource
  K8s:
  - https://www.youtube.com/watch?v=YzaYqxW0wGs&list=PL34sAs7_26wNBRWM6BDhnonoA5FMERax0

